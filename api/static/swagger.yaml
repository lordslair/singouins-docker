openapi: 3.0.0
info:
  description: ''
  version: 0.0.1
  title: S&P Internal API
  contact: {}
paths:
  /admin:
    get:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: Admin UP request
      responses:
        '200':
          description: OK
      security:
        - admin_token: []
  /admin/user:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: User information request
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDefaultBodyShort'
      responses:
        '200':
          description: OK - User found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/user/validate:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: User validation request
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminUserValidate'
      responses:
        '200':
          description: OK - User found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/mypc:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: PC information request (one)
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDefaultBodyLong'
      responses:
        '200':
          description: OK - PC found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/mypc/pa:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: PC PA information request
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminMypcPa'
      responses:
        '200':
          description: OK - PC PA found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/mypc/wallet:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: PC Wallet information request
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDefaultBodyLong'
      responses:
        '200':
          description: OK - PC Wallet found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/mypcs:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: PCs information request (all)
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminDefaultBodyShort'
      responses:
        '200':
          description: OK - PCs found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/squad:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: Squad information request (one)
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminSquad'
      responses:
        '200':
          description: OK - Squad found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/korp:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: Korp information request (one)
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminKorp'
      responses:
        '200':
          description: OK - Korp found
        '400':
          description: KO - Malformed JSON
      security:
        - admin_token: []
  /admin/korps:
    post:
      tags:
        - '/admin : Admin request (from Discord)'
      summary: Korp information request (all)
      responses:
        '200':
          description: OK - Korps found
      security:
        - admin_token: []

  /auth/register:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Register a new user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterPostBody'
      responses:
        '201':
          description: OK - User registered | Registration mail sent
        '206':
          description: OK - User registered | Registration mail not sent
        '400':
          description: KO - Missing information in request
        '401':
          description: KO - Bad information in request
  /auth/confirm/{token}:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Conirm a new user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRegisterPostBody'
      responses:
        '201':
          description: OK - User confirmed
        '498':
          description: KO - Token expired
  /auth/login:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Returns access_token & refresh_token
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthLoginPostBody'
      responses:
        '200':
          description: OK - User logged in
        '400':
          description: KO - Missing information in request
        '401':
          description: KO - Bad information in request
  /auth/refresh:
    post:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Returns new access_token from refresh_token
      security:
        - refresh_token: []
      responses:
        '200':
          description: OK
  /auth/infos:
    get:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Get informations from an authenticated user
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /auth/delete/{username}:
    delete:
      tags:
        - '/auth: Authentificaton Requests'
      summary: Permanently delete a PC from DB
      parameters:
        - in: path
          name: username
          schema:
            type: string
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK - User deleted
        '400':
          description: KO - Missing information in request
        '404':
          description: KO - User not found

  /mypc:
    post:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Create a new PC for logged in user
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PcCreateBody'
      security:
        - access_token: []
      responses:
        '201':
          description: OK - PC created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
        '400':
          description: KO - Missing information in request
        '409':
          description: KO - PC already exists
    get:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Get PC list belonging to logged in user
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}:
    get:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Get PC informations
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Delete a PC
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK - PC deleted
  /mypc/{pcid}/skills:
    get:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Get PC skills
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK - Skills found
  /mypc/{pcid}/cds:
    get:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Get PC CDs
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK - Skills found
  /mypc/{pcid}/view:
    get:
      tags:
        - '/mypc: PC Requests (on your own PC)'
      summary: Get PC view
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '200':
          description: OK - view found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'

  /mypc/{pcid}/instance:
    post:
      tags:
        - '/mypc/{pcid}/instance: Instance Requests'
      summary: Create a fresh instance
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceCreateBody'
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
            example: 1
          required: true
      responses:
        '201':
          description: OK - Instance creation successed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'
  /mypc/{pcid}/instance/{instanceid}/leave:
    post:
      tags:
        - '/mypc/{pcid}/instance: Instance Requests'
      summary: Leave an instance
      security:
        - access_token: []
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
            example: 1
          required: true
        - in: path
          name: instanceid
          schema:
            type: integer
            example: 14
          required: true
      responses:
        '200':
          description: OK - Instance leave successed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericResponse'

  /pc/{pcid}:
    get:
      tags:
        - '/pc : PC Requests (not on your own PC)'
      summary: Get PC informations
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
  /pc/name/{name}:
    get:
      tags:
        - '/pc : PC Requests (not on your own PC)'
      summary: Get PC informations
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
      responses:
        '200':
          description: OK

  /mypc/{pcid}/mp:
    post:
      tags:
        - '/mp: MP Requests'
      summary: Send a MP from a PC to a list of PCs
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MpSendPostBody'
      security:
        - access_token: []
      responses:
        '201':
          description: OK - MP sent
        '409':
          description: KO - Token/username mismatch
    get:
      tags:
        - '/mp: MP Requests'
      summary: Get MP list for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '409':
          description: KO - Token/username mismatch
  /mypc/{pcid}/mp/{mpid}:
    get:
      tags:
        - '/mp: MP Requests'
      summary: Get full MP
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: mpid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '409':
          description: KO - Token/username mismatch
    delete:
      tags:
        - '/mp: MP Requests'
      summary: Delete a MP from a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: mpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK - MP deleted
        '409':
          description: KO - Token/username mismatch
  /mypc/{pcid}/mp/addressbook:
    get:
      tags:
        - '/mp: MP Requests'
      summary: Get Addressbook from a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: OK
        '409':
          description: KO - Token/username mismatch

  /mypc/{pcid}/item:
    get:
      tags:
        - '/item : Item Requests'
      summary: Get item list for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK

  /mypc/{pcid}/squad:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Create a squad for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}:
    get:
      tags:
        - '/squad : Squad Requests'
      summary: Get squad list for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
    delete:
      tags:
        - '/squad : Squad Requests'
      summary: Delete a squad for a PC (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}/invite/{targetid}:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Invite a PC into a squad (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
        - in: path
          name: targetid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}/kick/{targetid}:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Kick a PC from a squad (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
        - in: path
          name: targetid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}/accept:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Accept a squad invite
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}/decline:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Decline a squad invite
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/squad/{squadid}/leave:
    post:
      tags:
        - '/squad : Squad Requests'
      summary: Leave a squad
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: squadid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK

  /mypc/{pcid}/korp:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Create a korp for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
      requestBody:
        description: ''
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KorpCreateBody'
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}:
    get:
      tags:
        - '/korp : Korp Requests'
      summary: Get korp list for a PC
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
    delete:
      tags:
        - '/korp : Korp Requests'
      summary: Delete a korp for a PC (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}/invite/{targetid}:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Invite a PC into a korp (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
        - in: path
          name: targetid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}/kick/{targetid}:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Kick a PC from a korp (Leader only)
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
        - in: path
          name: targetid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}/accept:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Accept a korp invite
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}/decline:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Decline a korp invite
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK
  /mypc/{pcid}/korp/{korpid}/leave:
    post:
      tags:
        - '/korp : Korp Requests'
      summary: Leave a korp
      parameters:
        - in: path
          name: pcid
          schema:
            type: integer
          required: true
        - in: path
          name: korpid
          schema:
            type: integer
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK

  /meta/item/{itemtype}:
    get:
      tags:
        - '/meta : Get Meta informations'
      summary: Get item Meta informations
      parameters:
        - in: path
          name: itemtype
          schema:
            type: string
            enum: [weapon, potion, armor]
          required: true
      security:
        - access_token: []
      responses:
        '200':
          description: OK

components:
  schemas:
    AdminDefaultBodyLong:
      type: object
      properties:
        discordname:
          type: string
          pattern: '^.{3,32}#[0-9]{4}$' # regex for discord username
          example: 'DiscordName#1234'
        pcid:
          type: integer
          minimum: 1
    AdminDefaultBodyShort:
      type: object
      properties:
        discordname:
          type: string
          pattern: '^.{3,32}#[0-9]{4}$' # regex for discord username
          example: 'DiscordName#1234'
    AdminUserValidate:
      type: object
      properties:
        discordname:
          type: string
          pattern: '^.{3,32}#[0-9]{4}$' # regex for discord username
          example: 'DiscordName#1234'
        usermail:
          type: string
          format: email
    AdminMypcPa:
      type: object
      properties:
        discordname:
          type: string
          pattern: '^.{3,32}#[0-9]{4}$' # regex for discord username
          example: 'DiscordName#1234'
        pcid:
          type: integer
          minimum: 1
        redpa:
          type: integer
          minimum: 1
          maximum: 16
          nullable: true
        bluepa:
          type: integer
          minimum: 1
          maximum: 8
          nullable: true
      required:
        - discordname
        - pcid
    AdminSquad:
      type: object
      properties:
        squadid:
          type: integer
          minimum: 1
          nullable: true
    AdminKorp:
      type: object
      properties:
        korpid:
          type: integer
          minimum: 1
          nullable: false

    AuthRegisterPostBody:
      type: object
      properties:
        username:
          type: string
          format: string
        password:
          type: string
          format: password
        mail:
          type: string
          format: string
    AuthLoginPostBody:
      type: object
      properties:
        username:
          type: string
          format: string
        password:
          type: string
          format: password

    PcCreateBody:
      type: object
      properties:
        class:
          type: integer
          minimum: 1
          maximum: 6
          example: 3
          nullable: false
        race:
          type: integer
          minimum: 1
          maximum: 4
          example: 4
          nullable: false
        name:
          type: string
          format: string
          nullable: false
          example: "Mÿ fàncy Sîng'0uin"
          pattern: "^[\\w ']{20}$" # regex for 20chars string
        gender:
          type: boolean
          nullable: false
        cosmetic:
          type: object
          properties:
            metaid:
              type: integer
              example: 17
            data:
              type: object
              properties:
                hasGender:
                  type: boolean
                  example: True
                beforeArmor:
                  type: boolean
                  example: False
                hideArmor:
                  type: array
                  items:
                    type: integer
                  nullable: true
        equipment:
          type: object
          properties:
            lefthand:
              type: object
              properties:
                metaid:
                  type: integer
                  example: 1
                metatype:
                  type: string
                  example: 'weapon'
            righthand:
              type: object
              properties:
                metaid:
                  type: integer
                  example: 14
                metatype:
                  type: string
                  example: 'weapon'

    MpSendPostBody:
      type: object
      properties:
        src:
          type: integer
          format: integer
        dst:
          type: array
          items:
            type: integer
        subject:
          type: string
          format: string
        body:
          type: string
          format: string

    KorpCreateBody:
      type: object
      properties:
        name:
          type: string
          format: string
          nullable: false
          example: 'My fancy Korp'
          pattern: '^.{16}$'      # regex for 16chars string

    InstanceCreateBody:
      type: object
      properties:
        hardcore:
          type: boolean
          nullable: false
          example: False
        fast:
          type: boolean
          nullable: false
          example: False
        public:
          type: boolean
          nullable: false
          example: True
        mapid:
          type: integer
          nullable: false
          example: 1
          minimum: 1

    GenericResponse:
      type: object
      properties:
        msg:
          type: string
          format: string
          nullable: false
        payload:
          type: object
          nullable: true
        success:
          type: boolean
          nullable: false

  securitySchemes:
    refresh_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    access_token:
      type: http
      scheme: bearer
      bearerFormat: JWT
    admin_token:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - refresh_token: []
  - access_token: []
  - admin_token: []
